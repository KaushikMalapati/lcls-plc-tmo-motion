<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_LI2K4_IP1" Id="{90796e54-85a2-4580-a821-f0ffc741543f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_LI2K4_IP1
VAR

    fbMotionLI2K4X: FB_MotionStage;
    fbMotionLI2K4Y: FB_MotionStage;

   {attribute 'pytmc' := '
        pv: LI2K4:IP1
        io: io
    '}
    fbLI2K4States: FB_PositionStatePMPS2D;
    {attribute 'pytmc' := '
        pv: LI2K4:IP1:STATE:SET
        io: io
    '}
    li2k4_enumSet: ENUM_LaserCoupling_States;
     {attribute 'pytmc' := '
        pv: LI2K4:IP1:STATE:GET
        io: i
    '}
    li2k4_enumGet: ENUM_LaserCoupling_States;
    fbStateSetup: FB_StateSetupHelper;
    stDefault: ST_PositionState :=(
  //      fDelta :=0.5,
        fVelocity := 0.5,
        bMoveOk := TRUE,
        bValid := TRUE
    );
    aLI2K4XStates: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    aLI2K4YStates: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;



    EPS_LI2K4Y_Positive : FB_EPS;
    EPS_LI2K4Y_Negative : FB_EPS;
    EPS_LI2K4X_Positive : FB_EPS;
    EPS_LI2K4X_Negative : FB_EPS;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF Main.M46.stAxisStatus.fActPosition < -0.85 THEN
   Main.M45.fVelocity := 0.01;
END_IF
IF Main.M45.stAxisStatus.fActPosition > 85 THEN
   Main.M46.bExecute := FALSE;
END_IF

fbMotionLI2K4Y(stMotionStage:=Main.M45);
fbMotionLI2K4X(stMotionStage:=Main.M46);

//LI2K4 2DPMPS
fbStateSetup(stPositionState:=stDefault, bSetDefault:=TRUE);
fbStateSetup(stPositionState:=aLI2K4XStates[ENUM_LaserCoupling_States.OUT], fDelta := 0.5, sName := 'OUT', fPosition:=-0.75);
{*
aLI2K4XStates[ENUM_LaserCoupling_States.OUT].nMoveOrder := 1;
aLI2K4YStates[ENUM_LaserCoupling_States.OUT].nMoveOrder := 2;
aLI2K4XStates[ENUM_LaserCoupling_States.Mirror1].nMoveOrder := 2;
aLI2K4YStates[ENUM_LaserCoupling_States.Mirror1].nMoveOrder := 1; *}

fbStateSetup(stPositionState:=aLI2K4YStates[ENUM_LaserCoupling_States.OUT], fDelta := 0.5,  sName := 'OUT', fPosition:=133.0);
fbStateSetup(stPositionState:=aLI2K4XStates[ENUM_LaserCoupling_States.Mirror1],fDelta := 1.5, sName := 'MIRROR1', fPosition:=-3.375);
fbStateSetup(stPositionState:=aLI2K4YStates[ENUM_LaserCoupling_States.Mirror1],fDelta := 0.5, sName := 'MIRROR1', fPosition:=84.5);

aLI2K4XStates[ENUM_LaserCoupling_States.OUT].stPMPS.sPmpsState := 'LI2K4:IP1-OUT';
aLI2K4XStates[ENUM_LaserCoupling_States.Mirror1].stPMPS.sPmpsState := 'LI2K4:IP1-MIRROR1';

//LI2K4 EPS condition: OUT->In move Y then move X + IN->OUT move X thenm move Y
//Y only can move up and down when X is OUT
EPS_LI2K4Y_Positive(eps:=Main.M45.stEPSForwardEnable);
EPS_LI2K4Y_Positive.setBit(nBits := 0, bValue:= Main.M46.stAxisStatus.fActPosition > -0.8 OR Main.M45.stAxisStatus.fActPosition < 85);
EPS_LI2K4Y_Negative(eps:=Main.M45.stEPSBackwardEnable);
EPS_LI2K4Y_Negative.setBit(nBits := 0, bValue:= Main.M46.stAxisStatus.fActPosition > -0.8 OR Main.M45.stAxisStatus.fActPosition > 84);

EPS_LI2K4X_Positive(eps:=Main.M46.stEPSForwardEnable);
EPS_LI2K4X_Positive.setBit(nBits := 0, bValue:= Main.M45.stAxisStatus.fActPosition < 85 OR Main.M46.stAxisStatus.fActPosition < -0.65);
EPS_LI2K4X_Negative(eps:=Main.M46.stEPSBackwardEnable);
EPS_LI2K4X_Negative.setBit(nBits := 0, bValue:= Main.M45.stAxisStatus.fActPosition < 85 OR Main.M46.stAxisStatus.fActPosition > -0.85);



//LI2K4 sequenct move : OUT->IN Y move first and then X moves IN->OUT X moves first then Y

fbLI2K4States(
    stMotionStage1:=Main.M45,
    stMotionStage2:=Main.M46,
    astPositionState1:=aLI2K4YStates,
    astPositionState2:=aLI2K4XStates,
    eEnumSet:=li2k4_enumSet,
    eEnumGet:=li2k4_enumGet,
    sDeviceName := 'LI2K4:IP1',
    sTransitionKey := 'LI2K4:IP1-TRANSITION',
    fbFFHWO:=fbFastFaultOutput1,
    fbArbiter:=fbArbiter,
    bEnableMotion:=TRUE,
    bEnableBeamParams:=TRUE,
    bEnablePositionLimits:=TRUE,
);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>