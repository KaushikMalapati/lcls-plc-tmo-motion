<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_SP1K4" Id="{cb7a4ca3-c4c8-4f3d-892b-f36c5516f8fa}" SpecialFunc="None">
    <Declaration><![CDATA[ PROGRAM PRG_SP1K4
VAR
    fbMotionLensX: FB_MotionStage;
    fbMotionFoilX: FB_MotionStage;
    fbMotionZPX: FB_MotionStage;
    fbMotionZPY: FB_MotionStage;
    fbMotionZPZ: FB_MotionStage;
    fbMotionYAGX: FB_MotionStage;
    fbMotionYAGY: FB_MotionStage;
    fbMotionYAGZ: FB_MotionStage;
    fbMotionYAGR: FB_MotionStage;
    fbMotionTL1: FB_MotionStage;
    fbMotionTL2: FB_MotionStage;
    fbMotionTLX: FB_MotionStage;
    fbMotionFoilY: FB_MotionStage;

    {attribute 'TcLinkTo' := 'TIIB[LensX_EL1004]^Channel 1^Input'}
    bHallInput1 AT %I* : BOOL;

    {attribute 'TcLinkTo' := 'TIIB[LensX_EL1004]^Channel 2^Input'}
    bHallInput2 AT %I* : BOOL;

    {attribute 'TcLinkTo' := 'TIIB[SP1K4-TL1-EL1124]^Channel 1^Input'}
    bTL1High AT %I*: BOOL;
    nTL1HighCycles: UINT;
    {attribute 'TcLinkTo' := 'TIIB[SP1K4-TL1-EL1124]^Channel 2^Input'}
    bTL1Low AT %I*: BOOL;
    nTL1LowCycles: UINT;
    {attribute 'TcLinkTo' := 'TIIB[SP1K4-TL2-EL1124]^Channel 1^Input'}
    bTL2High AT %I*: BOOL;
    nTL2HighCycles: UINT;
    {attribute 'TcLinkTo' := 'TIIB[SP1K4-TL2-EL1124]^Channel 2^Input'}
    bTL2Low AT %I*: BOOL;
    nTL2LowCycles: UINT;

    nNumCyclesNeeded: UINT := 100;

    bInit: BOOL :=TRUE;

    // Placeholder, later this should be TRUE if the attenuator is in and FALSE otherwise
    bAttIn: BOOL;

    ////ZP states start
    {attribute 'pytmc' := '
        pv: SP1K4:FZP
    '}
    fbZPStates: FB_PositionStatePMPS3D;
    {attribute 'pytmc' := '
        pv: SP1K4:FZP:STATE:SET
        io: io
    '}
    zp_enumSet: ENUM_ZonePlate_States;
     {attribute 'pytmc' := '
        pv: SP1K4:FZP:STATE:GET
        io: io
    '}
    zp_enumGet: ENUM_ZonePlate_States;
    fbZPSetup: FB_StateSetupHelper;
    fbZPDefault: ST_PositionState := (
        fDelta:=0.5,
        fVelocity:=1,
        bMoveOk:=TRUE,
        bValid:=TRUE
    );
    aZPXStates: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    aZPYStates: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    aZPZStates: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;

    ////Solid-ATT states start
    {attribute 'pytmc' := '
        pv: SP1K4:ATT
    '}
    fbATTStates: FB_PositionStatePMPS2D;
    {attribute 'pytmc' := '
        pv: SP1K4:ATT:STATE:SET
        io: io
    '}
    att_enumSet: ENUM_SolidAttenuator_States;
     {attribute 'pytmc' := '
        pv: SP1K4:ATT:STATE:GET
        io: i
    '}
    att_enumGet: ENUM_SolidAttenuator_States;
    fbATTSetup: FB_StateSetupHelper;
    fbATTDefault: ST_PositionState := (
        fDelta:=0.5,
        fVelocity:=1,
        bMoveOk:=TRUE,
        bValid:=TRUE
    );
    aATTXStates: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    aATTYStates: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;




END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Hardware Enable and fbMotionStage
//Lens X
Main.M32.bLimitForwardEnable := NOT bHallInput1;
Main.M32.bLimitBackwardEnable := NOT bHallInput2;
fbMotionLensX(stMotionStage:=Main.M32);


//Zone Plate
fbMotionZPX(stMotionStage:=Main.M34);
fbMotionZPY(stMotionStage:=Main.M35);
fbMotionZPZ(stMotionStage:=Main.M36);

fbZPSetup(stPositionState:=fbZPDefault, bSetDefault:=TRUE);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.OUT], sName:='OUT', fPosition:=8);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.OUT], sName:='OUT', fPosition:=0);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.OUT], sName:='OUT', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.Yag], sName:='YAG', fPosition:=9);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.Yag], sName:='YAG', fPosition:=1);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.Yag], sName:='YAG', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP860_1], sName:='FZP-860-Ne1', fPosition:=10);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP860_1], sName:='FZP-860-Ne1', fPosition:=0);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP860_1], sName:='FZP-860-Ne1', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP860_2], sName:='FZP-860-Ne2', fPosition:=11);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP860_2], sName:='FZP-860-Ne2', fPosition:=1);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP860_2], sName:='FZP-860-Ne2', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP860_3], sName:='FZP-860-Ne3', fPosition:=12);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP860_3], sName:='FZP-860-Ne3', fPosition:=0);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP860_3], sName:='FZP-860-Ne3', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP750_1], sName:='FZP-750-XPS1', fPosition:=13);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP750_1], sName:='FZP-750-XPS1', fPosition:=1);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP750_1], sName:='FZP-750-XPS1', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP750_2], sName:='FZP-750-XPS2', fPosition:=14);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP750_2], sName:='FZP-750-XPS2', fPosition:=0);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP750_2], sName:='FZP-750-XPS2', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP530_1], sName:='FZP-530-O1', fPosition:=15);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP530_1], sName:='FZP-530-O1', fPosition:=1);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP530_1], sName:='FZP-530-O1', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP530_2], sName:='FZP-530-O2', fPosition:=16);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP530_2], sName:='FZP-530-O2', fPosition:=0);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP530_2], sName:='FZP-530-O2', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP460_1], sName:='FZP-460-Ti1', fPosition:=17);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP460_1], sName:='FZP-460-Ti1', fPosition:=1);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP460_1], sName:='FZP-460-Ti1', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP460_2], sName:='FZP-460-Ti2', fPosition:=18);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP460_2], sName:='FZP-460-Ti2', fPosition:=0);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP460_2], sName:='FZP-460-Ti2', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP410_1], sName:='FZP-410-N1', fPosition:=19);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP410_1], sName:='FZP-410-N1', fPosition:=1);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP410_1], sName:='FZP-410-N1', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP410_2], sName:='FZP-410-N2', fPosition:=20);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP410_2], sName:='FZP-410-N2', fPosition:=0);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP410_2], sName:='FZP-410-N2', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP290_1], sName:='FZP-290-C1', fPosition:=21);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP290_1], sName:='FZP-290-C1', fPosition:=1);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP290_1], sName:='FZP-290-C1', fPosition:=0);

fbZPSetup(stPositionState:=aZPXStates[ENUM_ZonePlate_States.FZP290_2], sName:='FZP-290-C2', fPosition:=22);
fbZPSetup(stPositionState:=aZPYStates[ENUM_ZonePlate_States.FZP290_2], sName:='FZP-290-C2', fPosition:=0);
fbZPSetup(stPositionState:=aZPZStates[ENUM_ZonePlate_States.FZP290_2], sName:='FZP-290-C2', fPosition:=0);


bAttIn := att_enumGet <> ENUM_SolidAttenuator_States.OUT AND  att_enumGet <> ENUM_SolidAttenuator_States.Unknown;

IF bAttIn THEN
    // Attenuator is in, pick the ATT_IN states
    aZPXStates[ENUM_ZonePlate_States.OUT].stPMPS.sPmpsState := 'SP1K4:FZP-OUT';
    aZPXStates[ENUM_ZonePlate_States.Yag].stPMPS.sPmpsState := 'SP1K4:FZP-YAG';
    aZPXStates[ENUM_ZonePlate_States.FZP860_1].stPMPS.sPmpsState := 'SP1K4:FZP-860-Ne1_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP860_2].stPMPS.sPmpsState := 'SP1K4:FZP-860-Ne2_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP860_3].stPMPS.sPmpsState := 'SP1K4:FZP-860-Ne3_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP750_1].stPMPS.sPmpsState := 'SP1K4:FZP-750-XPS1_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP750_2].stPMPS.sPmpsState := 'SP1K4:FZP-750-XPS2_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP530_1].stPMPS.sPmpsState := 'SP1K4:FZP-530-O1_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP530_2].stPMPS.sPmpsState := 'SP1K4:FZP-530-O2_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP460_1].stPMPS.sPmpsState := 'SP1K4:FZP-460-Ti1_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP460_2].stPMPS.sPmpsState := 'SP1K4:FZP-460-Ti2_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP410_1].stPMPS.sPmpsState := 'SP1K4:FZP-410-N1_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP410_2].stPMPS.sPmpsState := 'SP1K4:FZP-410-N2_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP290_1].stPMPS.sPmpsState := 'SP1K4:FZP-290-C1_ATT_IN';
    aZPXStates[ENUM_ZonePlate_States.FZP290_2].stPMPS.sPmpsState := 'SP1K4:FZP-290-C2_ATT_IN';

ELSE
    // Attenuator is out, pick the ATT_OUT states
    aZPXStates[ENUM_ZonePlate_States.OUT].stPMPS.sPmpsState := 'SP1K4:FZP-OUT';
    aZPXStates[ENUM_ZonePlate_States.Yag].stPMPS.sPmpsState := 'SP1K4:FZP-YAG';
    aZPXStates[ENUM_ZonePlate_States.FZP860_1].stPMPS.sPmpsState := 'SP1K4:FZP-860-Ne1_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP860_2].stPMPS.sPmpsState := 'SP1K4:FZP-860-Ne2_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP860_3].stPMPS.sPmpsState := 'SP1K4:FZP-860-Ne3_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP750_1].stPMPS.sPmpsState := 'SP1K4:FZP-750-XPS1_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP750_2].stPMPS.sPmpsState := 'SP1K4:FZP-750-XPS2_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP530_1].stPMPS.sPmpsState := 'SP1K4:FZP-530-O1_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP530_2].stPMPS.sPmpsState := 'SP1K4:FZP-530-O2_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP460_1].stPMPS.sPmpsState := 'SP1K4:FZP-460-Ti1_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP460_2].stPMPS.sPmpsState := 'SP1K4:FZP-460-Ti2_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP410_1].stPMPS.sPmpsState := 'SP1K4:FZP-410-N1_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP410_2].stPMPS.sPmpsState := 'SP1K4:FZP-410-N2_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP290_1].stPMPS.sPmpsState := 'SP1K4:FZP-290-C1_ATT_OUT';
    aZPXStates[ENUM_ZonePlate_States.FZP290_2].stPMPS.sPmpsState := 'SP1K4:FZP-290-C2_ATT_OUT';
END_IF


fbZPStates(
    stMotionStage1:=Main.M34,
    stMotionStage2:=Main.M35,
    stMotionStage3:=Main.M36,
    astPositionState1:=aZPXStates,
    astPositionState2:=aZPYStates,
    astPositionState3:=aZPZStates,
    eEnumSet:=zp_enumSet,
    eEnumGet:=zp_enumGet,
    fbFFHWO:=fbFastFaultOutput1,
    fbArbiter:=fbArbiter,
    bEnableMotion:=TRUE,
    bEnableBeamParams:=TRUE,
    bEnablePositionLimits:=TRUE,
    sDeviceName:='SP1K4:FZP',
    sTransitionKey:='SP1K4:FZP-TRANSITION',
);


// Foil X (Solid-ATT-X)
fbMotionFoilX(stMotionStage:=Main.M33);


// YAG
fbMotionYAGX(stMotionStage:=Main.M37);
fbMotionYAGY(stMotionStage:=Main.M38);
fbMotionYAGZ(stMotionStage:=Main.M39);
fbMotionYAGR(stMotionStage:=Main.M40);
// Thorlabs
fbMotionTL1(stMotionStage:=Main.M41);
fbMotionTL2(stMotionStage:=Main.M42);
//Thorlab-LenX
fbMotionTLX(stMotionStage:=Main.M43);
//FOIL Y (Solid-ATT-Y)
fbMotionFoilY(stMotionStage:=Main.M44);

// SP1K4-SOLID-ATT PMPS
fbATTSetup(stPositionState:=fbATTDefault, bSetDefault:=TRUE);

fbATTSetup(stPositionState:=aATTXStates[ENUM_SolidAttenuator_States.OUT], sName:='OUT', fPosition:=0);
fbATTSetup(stPositionState:=aATTYStates[ENUM_SolidAttenuator_States.OUT], sName:='OUT', fPosition:=0);

fbATTSetup(stPositionState:=aATTXStates[ENUM_SolidAttenuator_States.Target1], sName:='TARGET1', fPosition:=0);
fbATTSetup(stPositionState:=aATTYStates[ENUM_SolidAttenuator_States.Target1], sName:='TARGET1', fPosition:=0);

fbATTSetup(stPositionState:=aATTXStates[ENUM_SolidAttenuator_States.Target2], sName:='TARGET2', fPosition:=0);
fbATTSetup(stPositionState:=aATTYStates[ENUM_SolidAttenuator_States.Target2], sName:='TARGET2', fPosition:=0);

fbATTSetup(stPositionState:=aATTXStates[ENUM_SolidAttenuator_States.Target3], sName:='TARGET3', fPosition:=0);
fbATTSetup(stPositionState:=aATTYStates[ENUM_SolidAttenuator_States.Target3], sName:='TARGET3', fPosition:=0);

fbATTSetup(stPositionState:=aATTXStates[ENUM_SolidAttenuator_States.Target4], sName:='TARGET4', fPosition:=0);
fbATTSetup(stPositionState:=aATTYStates[ENUM_SolidAttenuator_States.Target4], sName:='TARGET4', fPosition:=0);

fbATTSetup(stPositionState:=aATTXStates[ENUM_SolidAttenuator_States.Target5], sName:='TARGET5', fPosition:=0);
fbATTSetup(stPositionState:=aATTYStates[ENUM_SolidAttenuator_States.Target5], sName:='TARGET5', fPosition:=0);

aATTXStates[ENUM_SolidAttenuator_States.OUT].stPMPS.sPmpsState := 'SP1K4:ATT-OUT';
aATTXStates[ENUM_SolidAttenuator_States.Target1].stPMPS.sPmpsState := 'SP1K4:ATT-TARGET1';
aATTXStates[ENUM_SolidAttenuator_States.Target2].stPMPS.sPmpsState := 'SP1K4:ATT-TARGET2';
aATTXStates[ENUM_SolidAttenuator_States.Target3].stPMPS.sPmpsState := 'SP1K4:ATT-TARGET3';
aATTXStates[ENUM_SolidAttenuator_States.Target4].stPMPS.sPmpsState := 'SP1K4:ATT-TARGET4';
aATTXStates[ENUM_SolidAttenuator_States.Target5].stPMPS.sPmpsState := 'SP1K4:ATT-TARGET5';

fbATTStates(
    stMotionStage1:=Main.M33,
    stMotionStage2:=Main.M44,
    astPositionState1:=aATTXStates,
    astPositionState2:=aATTYStates,
    eEnumSet:=att_enumSet,
    eEnumGet:=att_enumGet,
    fbFFHWO:=fbFastFaultOutput1,
    fbArbiter:=fbArbiter,
    bEnableMotion:=TRUE,
    bEnableBeamParams:=TRUE,
    bEnablePositionLimits:=TRUE,
    sDeviceName:='SP1K4:ATT',
    sTransitionKey:='SP1K4:ATT-TRANSITION',
);








IF NOT bTL1High THEN
    nTL1HighCycles := MIN(nTL1HighCycles + 1, nNumCyclesNeeded);
ELSE
    nTL1HighCycles := 0;
END_IF
IF NOT bTL1Low THEN
    nTL1LowCycles := MIN(nTL1LowCycles + 1, nNumCyclesNeeded);
ELSE
    nTL1LowCycles := 0;
END_IF
IF NOT bTL2High THEN
    nTL2HighCycles := MIN(nTL2HighCycles + 1, nNumCyclesNeeded);
ELSE
    nTL2HighCycles := 0;
END_IF
IF NOT bTL2Low THEN
    nTL2LowCycles := MIN(nTL2LowCycles + 1, nNumCyclesNeeded);
ELSE
    nTL2LowCycles := 0;
END_IF

Main.M41.bLimitForwardEnable := nTL1HighCycles < nNumCyclesNeeded;
Main.M41.bLimitBackwardEnable := nTL1LowCycles < nNumCyclesNeeded;
Main.M42.bLimitForwardEnable := nTL2HighCycles < nNumCyclesNeeded;
Main.M42.bLimitBackwardEnable := nTL2LowCycles < nNumCyclesNeeded;
Main.M43.bLimitBackwardEnable := True;
Main.M43.bLimitForwardEnable := True;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>